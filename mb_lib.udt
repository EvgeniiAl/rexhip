TYPE "udt_mb_device"
VERSION : 0.1
   STRUCT
      enable : Bool := true;
      unit : USInt;   // (not in use)
      qError : Bool;   // All types of errors including comError
      qComError : Bool;   // Communication error
      conf : Struct
         max_qComError { S7_SetPoint := 'True'} : USInt := 2;   // Max repeating timeout errors before qComError is set
         time_qErrror { S7_SetPoint := 'True'} : Time := T#2s;   // Length of the qError_tof puls
      END_STRUCT;
      log : Struct
         done_cnt : UDInt;
         done_dtl {OriginalPartName := 'DTL'; LibVersion := '1.0'} : DTL;
         err_cnt : UDInt;
         err_dtl {OriginalPartName := 'DTL'; LibVersion := '1.0'} : DTL;
         err_status : Word;
         err_timeout : Bool;
         err_d_addr : UDInt;
      END_STRUCT;
      intern : Struct
         header_qid : Int;
         err_cnt : USInt;   // repeating errors
         err_dtl {OriginalPartName := 'DTL'; LibVersion := '1.0'} : DTL;
         offset_qid : Int := 0;   // device query id.
         insert_id : USInt;
         recive_id : USInt;
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "udt_mb"
VERSION : 0.1
   STRUCT
      q : Struct   // query
         unit : UInt := 1;
         "fc" : UInt := 3;   // function code
         d_addr : UDInt;
         d_len : UInt := 1;
         qid : Int := 1;   // query id
      END_STRUCT;
      run : Struct
         mode : USInt;
         data_addr : UDInt;
         qid_cnt : Int;   // query id cnt, one cycle each plc-scan.
         insert : Bool := true;   // insert query param
      END_STRUCT;
      fix : Struct   // Static varables.
         buffer_db : DB_ANY;
      END_STRUCT;
      device : Struct   // Advanced timeout handler
         id_cnt : UInt;   // Device id cnt
         id_retry : UInt := 1;   // Retry device id, qComError
         retry_done : Bool;
         insert_id : USInt;
         recive_id : USInt;   // toggle when recived
         recived_d_addr : UDInt;
      END_STRUCT;
      conf : Struct
         buffer_handler : Bool := true;
      END_STRUCT;
      log : Struct
         unsync : USInt;
      END_STRUCT;
      status : Struct
         done : Bool;
         error : Bool;
         timeout : Bool;
         status : Word;
      END_STRUCT;
      query_above : Struct
         done : Bool;
         error : Bool;
      END_STRUCT;
      "fc" : Struct   // Function codes
         skip_query { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : USInt := 0;   // 0
         read_output_bits { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : USInt := 1;   // 1 - (coils)
         read_input_bits { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : USInt := 2;   // 2 - (discrete inputs)
         read_holding_reg { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : USInt := 3;   // 3
         read_input_reg { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : USInt := 4;   // 4
         write_single_output_bit { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : USInt := 5;   // 5 - (coil)
         write_single_holding_reg { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : USInt := 6;   // 6
         write_output_bits { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : USInt := 15;   // 15 - (coils)
         write_holding_reg { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : USInt := 16;   // 16
         modicon_read { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : USInt := 200;   // 200
         modicon_write_single { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : USInt := 201;   // 201
         modicon_write { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : USInt := 202;   // 202
      END_STRUCT;
      c : Struct   // Other constants
         auto_len : UInt := 0;   // 0
      END_STRUCT;
   END_STRUCT;

END_TYPE

