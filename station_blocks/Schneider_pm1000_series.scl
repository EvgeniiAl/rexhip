FUNCTION_BLOCK "Schneider_PM1000_series"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      mb_addr : UInt;
   END_VAR

   VAR_OUTPUT 
      all : Struct
         apparent_power : Real;
         active_power : Real;
         reactive_power : Real;
         power_factor : Real;
         voltage_L_L : Real;
         voltage_L_N : Real;
         current : Real;
      END_STRUCT;
      phase : Array[1..3] of Struct
         apparent_power : Real;
         active_power : Real;
         reactive_power : Real;
         power_factor : Real;
         voltage_L_L : Real;
         voltage_L_N : Real;
         current : Real;
      END_STRUCT;
   END_VAR

   VAR_IN_OUT 
      mb_query : "mb_query";
   END_VAR

   VAR 
      s : "mb_station_udt";
   END_VAR

   VAR_TEMP 
      tAll : Struct
         apparent_power : Real;
         active_power : Real;
         reactive_power : Real;
         power_factor : Real;
         voltage_L_L : Real;
         voltage_L_N : Real;
         current : Real;
      END_STRUCT;
      tPhase : Array[1..3] of Struct
         apparent_power : Real;
         active_power : Real;
         reactive_power : Real;
         power_factor : Real;
         voltage_L_L : Real;
         voltage_L_N : Real;
         current : Real;
      END_STRUCT;
      c : Int;
   END_VAR


BEGIN
	// Schneider Electric - PowerLogic - PM1000 Series Power Meters
	//  - PM1200
	// 
	// http://static.schneider-electric.us/docs/Power%20Management/
	// PowerLogic%20Products/Metering/PM1200%20power%20meter/
	// PLSED309039EN_PM1000_UG.pdf
	
	"mb_station_header"(station := #s, mb_query := #mb_query);
	#mb_query.mb_addr := #mb_addr;
	
	#mb_query.mode := #mb_query.c.read.holding_reg;
	
	#mb_query(data_addr := 3901, data_ptr := #tAll);
	IF #mb_query.done THEN
	    #all.apparent_power := "swap_real"(#tAll.apparent_power);
	    #all.active_power := "swap_real"(#tAll.active_power);
	    #all.reactive_power := "swap_real"(#tAll.reactive_power);
	    #all.power_factor := "swap_real"(#tAll.power_factor);
	    #all.voltage_L_L := "swap_real"(#tAll.voltage_L_L);
	    #all.voltage_L_N := "swap_real"(#tAll.voltage_L_N);
	    #all.current := "swap_real"(#tAll.current);
	END_IF;
	
	FOR #c := 1 TO 3 DO
	    CASE #c OF
	        1: #mb_query.data_addr := 3917;
	        2: #mb_query.data_addr := 3931;
	        3: #mb_query.data_addr := 3945;
	    END_CASE;
	    
	    #mb_query(data_ptr := #tPhase[#c]);
	    
	    IF #mb_query.done THEN
	        #phase[#c].apparent_power := "swap_real"(#tPhase[#c].apparent_power);
	        #phase[#c].active_power := "swap_real"(#tPhase[#c].active_power);
	        #phase[#c].reactive_power := "swap_real"(#tPhase[#c].reactive_power);
	        #phase[#c].power_factor := "swap_real"(#tPhase[#c].power_factor);
	        #phase[#c].voltage_L_L := "swap_real"(#tPhase[#c].voltage_L_L);
	        #phase[#c].voltage_L_N := "swap_real"(#tPhase[#c].voltage_L_N);
	        #phase[#c].current := "swap_real"(#tPhase[#c].current);
	    END_IF;
	END_FOR;
	
	"mb_station_footer"(station := #s, mb_query := #mb_query);
	
END_FUNCTION_BLOCK
